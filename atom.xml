<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fxtech]]></title>
  <link href="http://fxtechengineering.github.io/atom.xml" rel="self"/>
  <link href="http://fxtechengineering.github.io/"/>
  <updated>2014-12-21T11:48:34+00:00</updated>
  <id>http://fxtechengineering.github.io/</id>
  <author>
    <name><![CDATA[fxtech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Bluetooth Beamer Fernsteuerung]]></title>
    <link href="http://fxtechengineering.github.io/blog/2014/08/24/bluetooth-beamer-fernsteuerung/"/>
    
    <updated>2014-08-24T12:15:26+00:00</updated>
    <id>http://fxtechengineering.github.io/blog/2014/08/24/bluetooth-beamer-fernsteuerung</id>
    
    <content type="html"><![CDATA[<p>Viele Beamer bieten die Möglichkeit der Steuerung via RS-232-Schnittstelle. Mithilfe eines Bluetooth-Seriell-Wandlers (HC-06) sowie eines Pegelwandlers wird im Folgenden eine Bluetooth-Schnittstelle zur Fernsteuerung per Android App entwickelt.</p>

<h2>Hardware</h2>

<p><img class="center" src="http://fxtechengineering.github.io/images/rs232.png" title="Abbildung 1: Beamer mit RS-232 Schnittstelle" ></p>

<p style="text-align:center;"><strong>Abbildung 1: Beamer mit RS-232 Schnittstelle</strong></p>

<p>Für die Verwendung des Bluetooth-Seriell-Wandlers muss zunächst der Pegel der RS-232-Schnittstelle angepasst werden. Hierfür wird ein herkömmlicher RS232-TTL Konverter eingesetzt.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/converter.jpg" title="Abbildung 2: RS232-TTL Konverter" ></p>

<p style="text-align:center;"><strong>Abbildung 2: RS232-TTL Konverter</strong></p>

<p>Als Bluetooth-Seriell-Wandler wird das HC-06 Bluetooth Board verwendet. Dieses kann direkt mit dem Pegelwandler verbunden werden und benötigt keine externe Spannungsversorgung.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/hc06.jpg" title="Abbildung 3: HC-06 Bluetooth-Seriell-Wandler" ></p>

<p style="text-align:center;"><strong>Abbildung 3: HC-06 Bluetooth-Seriell-Wandler</strong></p>

<p>Die serielle RS-232-Schnittstelle des Beamers muss anschließend noch an die Konfiguration des HC-06 angepasst werden:
Default serail port setting : 9600, N, 8, 1
Pairing code : 1234
Nachdem die verwendete Hardware beschrieben wurde, folgt nun die entwickelte Android App.</p>

<h2>Software</h2>

<p><img class="center" src="http://fxtechengineering.github.io/images/screenshot.png" title="Abbildung 4: Android App" ></p>

<p style="text-align:center;"><strong>Abbildung 4: Android App</strong></p>

<p>Die App ermöglicht die Fernsteuerung des Beamers per Bluetooth. Neben der manuellen Steuerung ist ebenfalls eine Sprachsteuerung implementiert.
Für zukünftige Erweiterungen können die „BenQ RS232 Commands“ verwendet werden.</p>

<p>Download:
<a href ="http://fxtechengineering.github.io/downloads/BeamerRemote.apk">BeamerRemote.apk</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Drahtloses EKG]]></title>
    <link href="http://fxtechengineering.github.io/blog/2014/08/19/ekg/"/>
    
    <updated>2014-08-19T15:33:11+00:00</updated>
    <id>http://fxtechengineering.github.io/blog/2014/08/19/ekg</id>
    
    <content type="html"><![CDATA[<p><img class="center" src="http://fxtechengineering.github.io/images/abb0.png" title="Drahtloses EKG" ></p>

<p>Ziel dieses Projektes ist es an einem zu untersuchenden Patienten ein Elektrokardiogramm (EKG) aufzunehmen, dieses zu übertragen und auf einem PC zu visualisieren. Ausgangspunkt des Projektes war das EKG-Frontend ADS1293 von Texas Instruments.</p>

<h2>Einleitung</h2>

<p>Zunächst werden die Grundlagen eines Elektrokardiogramms erläutert. Unter einem EKG versteht man die Darstellung beziehungsweise die Aufzeichnung der Summe aller elektrischen Aktivitäten aller Herzmuskelfasern. Jeder Kontraktion des Herzens geht eine elektrische Erregung voraus, diese breitet sich ausgehend vom Sinusknoten über die übrigen Herzmuskelzellen aus.
Die elektrischen Spannungsänderungen können über die Körperoberfläche gemessen werden und in einem Zeitverlauf aufgezeichnet werden. Dazu ist eine Umsetzung von einer Ionenleitung, bedingt durch extrazelluläre Flüssigkeit im Körperinnenren, auf eine Elektronenleitung nötig. Diese Umsetzung erfolgt mit Hilfe von Elektroden, die dem Patienten auf die Körperoberfläche geklebt werden. In Abbildung 1 ist der typische Verlauf eines EKG schematisch dargestellt.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb1.png" title="Abbildung 1: Typischer Verlauf eines EKG" ></p>

<p style="text-align:center;"><strong>Abbildung 1: Typischer Verlauf eines EKG</strong></p>

<p>Läuft die zu messende Potentialwelle auf die Elektrode zu, wird sie mit einer positiven Polarität gemessen, entfernt sie sich von der Elektrode, so misst man eine negative Polarität. Das EKG-Signal liegt in dem Frequenzbereich von 0,5 Hz bis 100 Hz und besitzt typischerweise eine maximale Amplitude von etwa 1 mV.
Für die Messwertaufnahme wird in diesem Projekt eine drei Punkt Ableitung nach Einthoven verwendet, dabei wird die elektrische Potentialänderung zwischen drei Extremitäten gemessen.
Die drei Elektroden für die Messwert-aufnahme werden auf dem rechten Arm (RA), dem linken Arm (LA) und dem linken Bein (LL) aufgebracht. Die vierte Elektrode auf dem rechten Bein (RL), auch driven right leg genannt, dient der Störgrössenminimierung. Dabei wird der für das EKG irrelevante Gleichtaktanteil des Messsignals ausgekoppelt, invertiert und auf den Patienten zurückgeführt, so lässt sich der störende Einfluss des Gleichtaktanteils bei der Messwert-aufnahme minimieren.
Nachdem nun die Grundlagen des Elektrokardiogramms kurz erläutert wurden, werden im Folgenden die verschiedenen Anwendungsszenarien des Projektes beschrieben.</p>

<h2>Anwendungsszenarien</h2>

<p>Das Gerät soll in der Lage sein ein Elektrokardiogramm über die 3-Punkt Ableitung aufzunehmen, dabei ist ein kabelloser Betrieb vorgesehen, das heisst, dass das Gerät über einen integrierten Akku versorgt wird. Die Messwerte werden über vier Elektroden, welche auf dem Patienten aufgebracht werde, erfasst. Der Akku kann bei Bedarf mit Hilfe eines Mini-USB-Kabels über einen PC aufgeladen werden.
Des Weiteren sollen die erfassten Daten an einen PC übertragen werden, wo sie anschliessend auf dem Bildschirm grafisch dargestellt werden sollen.
Das Gerät soll weiterhin über einen Ein- und Ausschalter verfügen und den Zustand des Akkus über eine Led anzeigen.</p>

<h2>Technische Realisierung</h2>

<p>Das nachstehende Blockdiagramm zeigt die Zusammenhänge der einzelnen Komponenten auf. Das zentrale Element bilden der MSPCC430 und das EKG-Frontend ADS1293. Des Weiteren stellen der Battery Charger, der Buck-Boost Converter und der LiPo Akku die Spannungsversorgung des Systems sicher. Die restliche Peripherie dient der Signalübertragung und der Signalumsetzung, wie beispielsweise der FTDI-Chip der die Signale von UART nach USB umsetzt.
Zusätzlich ist für zukünftige Anwendungen eine Funkschnittstelle vorgesehen, sodass die Messwerte auch drahtlos übertragen werden können.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb2.png" title="Abbildung 2: Blockdiagramm" ></p>

<p style="text-align:center;"><strong>Abbildung 2: Blockdiagramm</strong></p>

<h2>Layout</h2>

<p>Für das Layout wurde die Freeware Version des Layout-Programms EAGLE verwendet.</p>

<p>Die Platinengrösse wurde so entworfen, dass die Platine später in das dafür vorgesehene Gehäuse passt. Dann wurden USB und D-Sub-Stecker an die Platinenseiten der Gehäuseöffnungen platziert. Der ADS-1293-Chip wurde in die Nähe des D-Sub-Steckers platziert und der Mikrocontroller in der Nähe der SMD-Antenne. Die Ladeschaltung und der Schaltregler befinden sich am oberen Rand der Platine. Bei jedem Bauteil wurde darauf geachtet, dass die Abblockkondensatoren möglichst nah am Bauteil sitzen. Siehe nachfolgende Abbildung.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb3.png" title="Abbildung 3: Layout" ></p>

<p style="text-align:center;"><strong>Abbildung 3: Layout</strong></p>

<p>Im endgültigen Layout wurden alle freien Flächen durch Massepotentialflächen ersetzt und in zufälligen Abständen wurden Vias zwischen Top und Bottom gesetzt, um Massekopplungen zu verhindern.</p>

<h2>Aufbau</h2>

<p>In dieser Version geht die USB-Schnittstelle über den UART-Chip direkt mit 5V an den Mikrocontroller. Da, dieser jedoch nur mit maximal 3,3V betrieben werden darf, wurde ein provisorischer Pegelwandler zwischengeschaltet, der in Schaltung und Layout nicht vorhanden ist.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb4.png" title="Abbildung 4: Fertige Platine mit Pegelwandler" ></p>

<p style="text-align:center;"><strong>Abbildung 4: Fertige Platine mit Pegelwandler</strong></p>

<h2>Mikrocontroller Firmware</h2>

<p>Die Hauptfunktionen der Mikrocontroller-Firmware sind die Datenerfassung sowie die Kommunikation mit LabVIEW. Die Kommunikation geschieht über die USB-Schnittstelle wodurch EKG und PC miteinander verbunden sind. Der verwendete Mikrocontroller besitzt jedoch keine Hardware-USB-Schnittstelle sondern einen USB-RS232-Umsetzer der eine UART Kommunikation via USB ermöglicht. Aufgabe der Firmware ist also per UART Daten / Kommandos zu empfangen, diese zu interpretieren und darauf zu antworten.</p>

<h2>Aufbau der Firmware</h2>

<p>Die Firmware besteht aus mehreren Modulen.</p>

<ul>
<li><p>TI_ADS1293_register_settings.h - ADS1293 Registereinstellungen</p></li>
<li><p>TI_ADS1293.h - ADS1293 Registeradressen</p></li>
<li><p>TI_MSP430_hardware_board.h - ADS1293 Pinbelegung</p></li>
<li><p>TI_MSP430.h - ADS1293 SPI-Pinbelegung</p></li>
<li><p>main.c - Hauptschleife für Datenerfassung /-Verarbeitung</p></li>
</ul>


<p>Die Module mit dem Präfix TI_ADS1293 sowie TI_MSP430 wurden aus dem Beispiel-Code &lsquo;MSP430/ADS1293 Interface Code Library v1.0&rsquo; entnommen und an die verwendete Hardware angepasst. Das Modul main.c enthält die Hauptschleife der Firmware und dient zur Erfassung des EKG Signals per SPI-Schnittstelle sowie zur Kommunikation mit dem PC.</p>

<h2>Softwaretest</h2>

<p>Im Softwaretest wurde zunächst die korrekte Messwertaufnahme des ADS1293 EKG-Frontends überprüft. Dazu wurde die Datenflusssteuerung mittels Software-Handshake entfernt, sodass die aufgenommenen Abtastwerte einfach per UART an den PC weitergeleitet werden konnten. Am PC wurden die empfangenen Messwerte über ein serielles Terminalprogramm eingelesen und gespeichert.
Die gespeicherten Messwerte konnten nun mit einem von Steffen zur Verfügung gestellten Matlab Skript ausgewertet und dargestellt werden:</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb5.png" title="Abbildung 5: SW Test mit Matlab" ></p>

<p style="text-align:center;"><strong>Abbildung 5: SW Test mit Matlab</strong></p>

<p>Durch diesen Softwaretest wurde die korrekte Funktion der Firmware bestätigt, welche als Grundvorraussetzung für die weitere LabVIEW-Programmierung diente.</p>

<h2>Empfängerseite</h2>

<p>Die an den PC übertragenden Daten werden mit Hilfe des Programms LabVIEW verarbeitet und visualisiert. Das Programm eignet sich dafür besonders, weil es für Anwendungen in der Messtechnik und Regelungstechnik konzipiert wurde.
Zunächst wird an dieser Stelle das Userinterface beschrieben. Das Userinterface besteht aus vier Bedienelementen und zwei Anzeigeelemente. Mit Hilfe der Bedienelemente werden drei wichtigsten Konfigurationen für die Kommunikation mit dem EKG vorgenommen.
Mit dem Bedienelement Sample Rate / ms kann die Abtastrate des EKGs eingestellt werden. Mit dieser Eingabe wird die Iterationszeit eines Schleifendurchlaufs bestimmt. Die Abtastrate ergibt sich zu 1 / Sample Rate.
Das Bedienelement Baud Rate / Baud stellt die Baudrate für die Kommunikation zwischen LabVIEW und dem Mikrocontroller des EKGs ein. Der Standardwert für dieses Projekt beträgt 115200 Baud. Wichtig bei der Einstellung der Baudrate ist es, dass die Baudrate von LabVIEW mit der Baudrate des Mikrocontrollers übereinstimmt, da ansonsten keine oder nicht die richtigen Messwerte übertragen werden.
Der COM Port des PCs an dem das EKG angeschlossen ist kann über das Bedienelement COM Port ausgewählt werden.
Das letzte Bedienelement ist der Stop-Button. Dieser hält das LabVIEW Programm an und beendet die Kommunikation zwischen PC und EKG.
Neben den vier Bedienelementen beinhaltet das Userinterface zwei Anzeigeelemente, die der Darstellung des EKG-Verlaufs dienen. Dabei handelt es sich um zwei Grafen, welche jeweils einen Kanal des EKGs ausgeben.</p>

<p>In Abbildung 6 ist das Userinterface dargestellt. Auf der linken Seite befinden sich die vier Bedienelemente, rechts daneben die beiden Anzeigeelemente.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/abb6.png" title="Abbildung 6: Labview Userinterface" ></p>

<p style="text-align:center;"><strong>Abbildung 6: Labview Userinterface</strong></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Cordwood Puzzle Gmail-Anzeige]]></title>
    <link href="http://fxtechengineering.github.io/blog/2014/03/07/cordwood-puzzle-gmail-anzeige/"/>
    
    <updated>2014-03-07T15:16:22+00:00</updated>
    <id>http://fxtechengineering.github.io/blog/2014/03/07/cordwood-puzzle-gmail-anzeige</id>
    
    <content type="html"><![CDATA[<p>Diese Anleitung zeigt den Aufbau einer Benachrichtigungsanzeige für Gmail aus folgenden Komponenten:</p>

<ul>
<li><p><a href ="http://www.boldport.com/shop/cordwood-puzzle-first-edition">Cordwood Puzzle von Boldport</a></p></li>
<li><p>Arduino (beliebig)</p></li>
</ul>


<p><img class="center" src="http://fxtechengineering.github.io/images/notifier0.jpg" title="Abbildung 1: CordwoodPuzzle von Boldport" ></p>

<p style="text-align:center;"><strong>Abbildung 1: CordwoodPuzzle von Boldport</strong></p>

<p>Die sechs LEDs werden über separate Pins vom Arduino gesteuert. Für den Einsatz als Gmail-Anzeige wird eine einfache Ampelschaltung vorgesehen.</p>

<figure class='code'><figcaption><span>Arduino Firmware</span><a href='http://fxtechengineering.github.io/downloads/getgmail.ino'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  GetGMail</span>
</span><span class='line'><span class="cm">  Dieses Sketch wartet auf ankommende Signale überd en seriellen Port</span>
</span><span class='line'><span class="cm">  Wird ein M empfangen dann fängt eine RGB LED an im Takt zu blinken und</span>
</span><span class='line'><span class="cm">  dabei ihre Farbe zu ändern. Wenn ein N empfangen wird, dann wird die LED </span>
</span><span class='line'><span class="cm">  abgeschaltet.</span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm">  Zu diesem Script gehört das Python-Script check-gmail.py das minütlich durch einen</span>
</span><span class='line'><span class="cm">  CronJob aufgerufen wird. Das Python-Script  verbindet sich zum Google-Mail-Server und</span>
</span><span class='line'><span class="cm">  fragt ab ob ungelesene eMails im Posteingang sind. Je nach Wert wird ein M oder ein N </span>
</span><span class='line'><span class="cm">  an der seriellen Port gesendet. </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">greenled_1</span> <span class="o">=</span> <span class="n">A13</span><span class="p">;</span> <span class="c1">// Led&#39;s and pins</span>
</span><span class='line'><span class="kt">int</span> <span class="n">yellowled_1</span> <span class="o">=</span> <span class="n">A14</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">redled_1</span> <span class="o">=</span> <span class="n">A15</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">greenled_2</span> <span class="o">=</span> <span class="n">A12</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">yellowled_2</span> <span class="o">=</span> <span class="n">A11</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">redled_2</span> <span class="o">=</span> <span class="n">A10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">val</span>      <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>        <span class="c1">// Wert aus dem seriellen Anschluss zu lesen</span>
</span><span class='line'><span class="kt">int</span> <span class="n">DELAY</span>    <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>      <span class="c1">// Intervall zwischen Wechsel der Farben</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Pinmodes of the leds</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span> <span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">flush</span> <span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">getNewMails</span><span class="p">(</span><span class="n">DELAY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">getNewMails</span><span class="p">(</span><span class="kt">int</span> <span class="n">Pause</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">())</span>
</span><span class='line'>    <span class="n">val</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">()</span><span class="o">-</span><span class="mi">48</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;eMails: &quot;</span><span class="o">+</span><span class="n">String</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>   <span class="c1">// Green on</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>      <span class="c1">// Red off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>   <span class="c1">// Yellow off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">delay</span><span class="p">(</span><span class="n">Pause</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    <span class="c1">// Green off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>      <span class="c1">// Red off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>  <span class="c1">// Yellow on</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">delay</span><span class="p">(</span><span class="n">Pause</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>     <span class="c1">// Red on</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>   <span class="c1">// Yellow off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    <span class="c1">// Green off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">delay</span><span class="p">(</span><span class="n">Pause</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>  <span class="c1">// Green off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">greenled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span> <span class="c1">// Yellow off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">yellowled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_1</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    <span class="c1">// Red off</span>
</span><span class='line'>      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">redled_2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nach der Programmierung kann der Arduino an den PC angeschlossen und das Python-Skript zur Gmail-Abfrage ausgeführt werden.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/notifier1.jpg" title="Abbildung 2: Gmail-Anzeige mit CordwoodPuzzle" ></p>

<p style="text-align:center;"><strong>Abbildung 2: Gmail-Anzeige mit CordwoodPuzzle</strong></p>

<p>:</p>

<figure class='code'><figcaption><span>Python-Skript für Gmail-Abruf</span><a href='http://fxtechengineering.github.io/downloads/check-gmail.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python2.7</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span> <span class="nn">serial</span><span class="o">,</span> <span class="nn">feedparser</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">SERIALPORT</span> <span class="o">=</span> <span class="s">&quot;/dev/tty.usbmodemfd121&quot;</span> <span class="c"># Serieller Port (Bitte anpassen)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Seriellen Port konfigurieren</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">SERIALPORT</span><span class="p">,</span> <span class="mi">9600</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">serial</span><span class="o">.</span><span class="n">SerialException</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth_handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Hier die Zugangsdaten zum GMail-Account eintragen</span>
</span><span class='line'><span class="n">auth_handler</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="s">&#39;New mail feed&#39;</span><span class="p">,</span> <span class="s">&#39;https://mail.google.com/&#39;</span><span class="p">,</span><span class="s">&#39;BENUTZERNAME&#39;</span><span class="p">,</span> <span class="s">&#39;PASSWORT&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">auth_handler</span><span class="p">)</span>
</span><span class='line'><span class="n">feed_file</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://mail.google.com/mail/feed/atom/&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Feed mit feedparser parsen</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">feedparser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">feed_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Anzahl der ungelesenen Gmails</span>
</span><span class='line'><span class="n">newmails</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">fullcount</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Senden der Anzahl der ungelesenen</span>
</span><span class='line'><span class="c"># Gmails ueber den seriellen Port</span>
</span><span class='line'><span class="k">if</span> <span class="n">newmails</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ser</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">newmails</span><span class="p">))</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Anzahl der Gmails, Betreff und Autor im Terminal ausgeben</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;Anzahl Gmails:&#39;</span><span class="p">,</span> <span class="n">d</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">fullcount</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">entries</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;----------------------------------------------&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Author: &#39;</span><span class="p">,</span> <span class="n">entry</span><span class="o">.</span><span class="n">author</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Betreff:&#39;</span><span class="p">,</span> <span class="n">entry</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ser</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># seriellen Port schliessen</span>
</span><span class='line'><span class="n">ser</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Intelligenter Beschleunigungssensor]]></title>
    <link href="http://fxtechengineering.github.io/blog/2013/12/02/intelligenter-beschleunigungssensor/"/>
    
    <updated>2013-12-02T08:14:16+00:00</updated>
    <id>http://fxtechengineering.github.io/blog/2013/12/02/intelligenter-beschleunigungssensor</id>
    
    <content type="html"><![CDATA[<p>Ziel dieses Projektes ist es die Beschleunigung in 3 Achsen zu messen und numerisch, sowie grafisch auszugeben. Die Beschleunigung ist eine physikalische Größe die in vielen Bereichen der Technik eine wichtige Rolle spielt, sodass sich etliche denkbare Anwendungsszenarien ergeben.</p>

<h2>Hardware</h2>

<p>Das Arduino Board, welches für dieses Projekt verwendet wird, arbeitet auf der Basis des Atmega1280. Der große Vorteil des Arduino Boards liegt darin, dass die Sensordaten einfach über die USB Schnittstelle auf dem PC empfangen werden können. Zunächst wird per Software die Kommunikation zwischen Controller und Sensor realisiert, dabei kommt der I²C - Bus zum Einsatz. Diese so empfangen Sensormesswerte werden im nächsten Schritt mit Hilfe der UART - Schnittstelle des Controllers per USB an den PC gesendet. Der schematische Kommunikationsaufbau ist in Abbildung 1 dargestellt.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/adxl.png" title="Abbildung 1: ADXL345 Kommunikationsaufbau" ></p>

<p style="text-align:center;"><strong>Abbildung 1: ADXL345 Kommunikationsaufbau</strong></p>

<p>Der ADXL345 ist ein dreiachsiger Beschleunigungssensor, der einen Messbereich von +/- 16 g umfasst. Der Sensor besteht aus einer mikromechanischen Polysiliziumstruktur, welche auf einen Siliziumwafer aufgebracht ist. Das Messprinzip basiert auf der Messungen eines differentiellen Kondensators. Der Sensor und das Arduino Board sind folgendermaßen verschaltet:</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/adxl_arduino.png" title="Abbildung 2: ADXL345 Verbindung mit Arduino" ></p>

<p style="text-align:center;"><strong>Abbildung 2: ADXL345 Verbindung mit Arduino</strong></p>

<p>Jeweils die Datenleitung (SDA) und die Taktleitung (SCL) des Sensors und der entsprechende Pin der Schnittstelle des Atmega1280 sind miteinander verbunden. Die SDO Leitung wird lediglich für die Kommunikation per SPI verwendet und wird deshalb auf Masse gezogen. Die beiden Interrupt Leitungen INT1 und INT2 werden verwendet und  sind deshlab hochohmig geschaltet. Da nur ein Beschleunigungssensor verwendet wird, wird die Chip Select Leitung (CS) zusammen mit der VCC Leitung auf 3,3V gelegt.</p>

<h2>Software</h2>

<p>Nachdem nun die Hardware sowie das Messprinzip beschrieben wurde, wird in diesem Kapitel das Lösungskonzept und die softwaretechnische Realisierung erläutert.
Das Projekt besteht aus zwei Programmen: Der Firmware des Arduinos, sowie der LabVIEW Applikation am PC. Die Firmware des Arduinos ist bereits im LabVIEW VI Package Manager Addon „LabVIEW Interface for Arduino“ enthalten. Mithilfe dieses Addons kann der Mikrocontroller direkt über LabVIEW programmiert und dessen GPIO-Ports sowie Peripherie angesteuert werden. Nach der Installation des Labview Addons befindet sich die Arduino Firmware unter Windows in folgendem Verzeichnis:
C:\Program Files\National Instruments\LabVIEW 2010\vi.lib\LabVIEW Interface for Arduino\Firmware\LVIFA_Base\LVIFA_Base.pde</p>

<p>Bevor der Arduino via LabVIEW angesteuert werden kann muss jedoch zunächst die Firmware mittels der Arduino IDE auf dem Mikrocontroller programmiert werden.</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/adxl_frontend.png" title="Abbildung 3: LabVIEW VI - Frontend" ></p>

<p style="text-align:center;"><strong>Abbildung 3: LabVIEW VI - Frontend</strong></p>

<p>Das Frontend verfügt lediglich über ein Bedienelement, nämlich über einen Stop Button. Die restlichen Elemente sind allesamt Anzeigeelemente und dienen zur Visualisierung der Messwerte. Das Frontend ist in Abbildung 3 dargestellt. Der Stop Button links unten im Frontend, blau umrandet, stoppt das laufende Programm und die USB Verbindung zum Arudino Board, zudem werden die Anzeigeelemente zurückgesetzt. Die Legende, schwarz markiert, zeigt welche Kurveder beiden Graphen welcher Achse des Beschleunigungssensor zugeordnet ist.
Die Visualisierung der Beschleunigungswerte geschiet in den verbleibenden drei Anzeigeelementen. Zunächst werden die unbearbeiteten Sensordaten in dem Graph dargestellt der grün umrandet ist. In Abbildung 3 kann man bereits erkennen, dass es während der Messung immer wieder zu unerwünschten Peaks kommt. Aus diesem Grund ist eine zusätzliche Verarbeitung der Sensordaten notwendig.
Die geglätteten Signale werden im rot markierten Graphen dargestellt.
Schließlich wird im letzten Graphen, hier gelb hervorgehoben, eine 3D Grafik aus den Sensordaten erzeugt. Diese gibt die relative Lage zur Startposition des Sensors an. Alle Graphen zeigen die Messwerte in Echtzeit an.</p>

<p>Im Folgenden wird das Blockdiagramm der LabVIEW VI erläutert:</p>

<p><img class="center" src="http://fxtechengineering.github.io/images/adxl_blockdiagramm.png" title="Abbildung 4: LabVIEW VI - Blockdiagramm" ></p>

<p style="text-align:center;"><strong>Abbildung 4: LabVIEW VI - Blockdiagramm</strong></p>

<p>Grundsätzlich hat das Blockdiagramm ein Top-Down Design.
Oben links beginnt die Hardwareinitialisierung (HW-Init), welche sich außerhalb der Haupt-While-Schleife befindet und nur einmal beim Start des Programms ausgeführt wird.
Bei der HW-Init wird zunächst die COM-Schnittstelle für den Arduino geöffnet. Dabei werden Baudrate und COM-Schnittstelle ausgewählt sowie I²C Kommandos an den Arduino gesendet um später Sensordaten zu empfangen. In der Sub VI für die Datenerfassung werden die Daten aus dem FIFO des Beschleunigungssensors gelesen und anschließend in einem Array gespeichert. Die empfangenen Daten müssen nun zur Anschaulichkeit für die grafische Darstellung skaliert werden. Dabei entspricht ein Messwert von 255 einem Beschleunigungswert von 1 g. Zur besseren grafischen Darstellung der Beschleunigung mittels 3D Würfel müssen die Messwerte zunächst geglättet werden. Dafür ist eine Mittelwertbildung der letzten 5 Messwerte ausreichend, wie sich in der Praxis gezeigt hat. Des Weiteren ist für die Transformation des 3D Würfels eine Winkelberechnung notwendig.</p>
]]></content>
    
  </entry>
  
</feed>