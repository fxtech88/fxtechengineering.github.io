<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | fxtech]]></title>
  <link href="http://fxtechengineering.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://fxtechengineering.github.io/"/>
  <updated>2014-12-20T15:40:38+00:00</updated>
  <id>http://fxtechengineering.github.io/</id>
  <author>
    <name><![CDATA[fxtech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cordwood Puzzle Gmail-Anzeige]]></title>
    <link href="http://fxtechengineering.github.io/blog/2014/12/20/cordwood-puzzle-gmail-anzeige/"/>
    <updated>2014-12-20T15:16:22+00:00</updated>
    <id>http://fxtechengineering.github.io/blog/2014/12/20/cordwood-puzzle-gmail-anzeige</id>
    <content type="html"><![CDATA[<p>Die folgende Anleitung zeigt den Aufbau einer Gmail-Anzeige aus folgenden Komponenten:</p>

<ul>
<li><p><a href ="http://www.boldport.com/shop/cordwood-puzzle-first-edition">Cordwood Puzzle von Boldport</a></p></li>
<li><p>Arduino (beliebig)</p></li>
</ul>


<p><img class="center" src="/images/notifier0.jpg" title="Abbildung 1: CordwoodPuzzle von Boldport" ></p>

<p style="text-align:center;"><strong>Abbildung 4: CordwoodPuzzle von Boldport</strong></p>

<p>Die sechs LEDs werden über separate Pins vom Arduino gesteuert. Für den Einsatz als Gmail-Anzeige wird eine einfache Ampelschaltung vorgesehen.</p>

<pre><code class="c Arduino Firmware http://fluuux.de/2012/09/wir-basteln-uns-einen-arduino-gmail-notifier/">/*
  GetGMail
  Dieses Sketch wartet auf ankommende Signale überd en seriellen Port
  Wird ein M empfangen dann fängt eine RGB LED an im Takt zu blinken und
  dabei ihre Farbe zu ändern. Wenn ein N empfangen wird, dann wird die LED 
  abgeschaltet.

  Zu diesem Script gehört das Python-Script check-gmail.py das minütlich durch einen
  CronJob aufgerufen wird. Das Python-Script  verbindet sich zum Google-Mail-Server und
  fragt ab ob ungelesene eMails im Posteingang sind. Je nach Wert wird ein M oder ein N 
  an der seriellen Port gesendet. 
*/

int greenled_1 = A13;   // Led's and pins
int yellowled_1 = A14;
int redled_1 = A15;
int greenled_2 = A12;
int yellowled_2 = A11;
int redled_2 = A10;

int val      = 0;       // Wert aus dem seriellen Anschluss zu lesen
int DELAY    = 200;     // Intervall zwischen Wechsel der Farben

void setup ()
{
  //Pinmodes of the leds

  pinMode(greenled_1, OUTPUT); 
  pinMode(yellowled_1, OUTPUT);
  pinMode(redled_1, OUTPUT);
  pinMode(greenled_2, OUTPUT); 
  pinMode(yellowled_2, OUTPUT);
  pinMode(redled_2, OUTPUT);
  digitalWrite(greenled_1, LOW); 
  digitalWrite(greenled_2, LOW); 
  digitalWrite(yellowled_1, LOW);
  digitalWrite(yellowled_2, LOW);
  digitalWrite(redled_1, LOW);
  digitalWrite(redled_2, LOW);

  Serial.begin (9600);
  Serial.flush ();
}

void loop ()
{
  getNewMails(DELAY); 
}

void getNewMails(int Pause)
{
  while(int i=-1)
  {
    if (Serial.available()) 
    val = Serial.read()-48;

    if (val &gt; 0) 
    {
        Serial.println("eMails: "+String(val));
        digitalWrite(greenled_1, HIGH);   // Green on
        digitalWrite(greenled_2, HIGH);
        digitalWrite(redled_1, LOW);      // Red off
        digitalWrite(redled_2, LOW);
        digitalWrite(yellowled_1, LOW);   // Yellow off
        digitalWrite(yellowled_2, LOW);
        delay(Pause);
        digitalWrite(greenled_1, LOW);    // Green off
        digitalWrite(greenled_2, LOW);  
        digitalWrite(redled_1, LOW);      // Red off
        digitalWrite(redled_2, LOW);      
        digitalWrite(yellowled_1, HIGH);  // Yellow on
        digitalWrite(yellowled_2, HIGH); 
        delay(Pause);
        digitalWrite(redled_1, HIGH);     // Red on
        digitalWrite(redled_2, HIGH);     
        digitalWrite(yellowled_1, LOW);   // Yellow off
        digitalWrite(yellowled_2, LOW);   
        digitalWrite(greenled_1, LOW);    // Green off
        digitalWrite(greenled_2, LOW);    
        delay(Pause);
    }
    else
    {
        digitalWrite(greenled_1, LOW);  // Green off
        digitalWrite(greenled_2, LOW);
        digitalWrite(yellowled_1, LOW); // Yellow off
        digitalWrite(yellowled_2, LOW);
        digitalWrite(redled_1, LOW);    // Red off
        digitalWrite(redled_2, LOW);
    }
  }
}
</code></pre>

<p>Nach der Programmierung kann der Arduino an den PC angeschlossen und das Python-Skript zur Gmail-Abfrage ausgeführt werden.</p>

<p><img class="center" src="/images/notifier1.jpg" title="Abbildung 2: Gmail-Anzeige mit CordwoodPuzzle" ></p>

<p style="text-align:center;"><strong>Abbildung 2: Gmail-Anzeige mit CordwoodPuzzle</strong></p>

<p>:
&#8220;` python Python-Skript für Gmail-Abruf</p>

<h1>!/usr/bin/python2.7</h1>

<p>import urllib2, serial, feedparser, time</p>

<p>SERIALPORT = &ldquo;/dev/tty.usbmodemfd121&rdquo; # Serieller Port (Bitte anpassen)</p>

<h1>Seriellen Port konfigurieren</h1>

<p>try:
    ser = serial.Serial(SERIALPORT, 9600)
except serial.SerialException:
    sys.exit()</p>

<p>auth_handler = urllib2.HTTPBasicAuthHandler()</p>

<h1>Hier die Zugangsdaten zum GMail-Account eintragen</h1>

<p>auth_handler.add_password(&lsquo;New mail feed&rsquo;, &lsquo;<a href="https://mail.google.com/">https://mail.google.com/</a>&rsquo;,&lsquo;BENUTZERNAME&rsquo;, &lsquo;PASSWORT&rsquo;)</p>

<p>opener = urllib2.build_opener(auth_handler)
feed_file = opener.open(&lsquo;<a href="https://mail.google.com/mail/feed/atom/">https://mail.google.com/mail/feed/atom/</a>&rsquo;)</p>

<h1>Feed mit feedparser parsen</h1>

<p>d = feedparser.parse(feed_file)</p>

<h1>Anzahl der ungelesenen Gmails</h1>

<p>newmails = d.feed.fullcount</p>

<h1>Senden der Anzahl der ungelesenen</h1>

<h1>Gmails ueber den seriellen Port</h1>

<p>if newmails > 0:
  ser.write(str(newmails))
  time.sleep(1)</p>

<h1>Anzahl der Gmails, Betreff und Autor im Terminal ausgeben</h1>

<p>  print &lsquo;Anzahl Gmails:&rsquo;, d.feed.fullcount
  for entry in d.entries:
    print &lsquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-&rsquo;
    print &lsquo;Author: &rsquo;, entry.author
    print &lsquo;Betreff:&rsquo;, entry.title
else:
  ser.write(0)
  time.sleep(1)</p>

<h1>seriellen Port schliessen</h1>

<p>ser.close()
&#8220;`</p>
]]></content>
  </entry>
  
</feed>
